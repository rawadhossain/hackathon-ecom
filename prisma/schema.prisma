// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String
  university        String
  department        String?
  program           String?
  year              String?
  phone             String?          // Admin view only
  dob               DateTime?        // Admin view only
  isAdmin           Boolean   @default(false)

  listings          Listing[]         @relation("UserListings")
  messagesSent      Message[]         @relation("Sender")
  messagesReceived  Message[]         @relation("Receiver")
  reviewsGiven      Review[]          @relation("Reviewer")
  reviewsReceived   Review[]          @relation("Target")
  reportsFiled      Report[]          @relation("Reporter")
  reportsAgainst    Report[]          @relation("Reported")

  createdAt         DateTime  @default(now())
}

model Listing {
  id               String        @id @default(cuid())
  title            String
  description      String
  type             ListingType
  condition        Condition?
  price            Float
  pricingType      PricingType
  imageUrls        String[]     // multiple images
  isVisibleToAll   Boolean      @default(true)
  university       String
  status           ListingStatus @default(ACTIVE)

  sellerId         String
  seller           User         @relation("UserListings", fields: [sellerId], references: [id])

  messages         Message[]
  reviews          Review[]
  meetupLocation   String?      // JSON string or "lat,lng"
  createdAt        DateTime     @default(now())
}

model Message {
  id          String   @id @default(cuid())
  content     String?
  imageUrl    String?
  listingId   String?
  senderId    String
  receiverId  String

  sender      User     @relation("Sender", fields: [senderId], references: [id])
  receiver    User     @relation("Receiver", fields: [receiverId], references: [id])
  listing     Listing? @relation(fields: [listingId], references: [id])

  createdAt   DateTime @default(now())
}

model Review {
  id            String   @id @default(cuid())
  rating        Int
  comment       String?

  reviewerId    String
  targetUserId  String
  listingId     String

  reviewer      User     @relation("Reviewer", fields: [reviewerId], references: [id])
  targetUser    User     @relation("Target", fields: [targetUserId], references: [id])
  listing       Listing  @relation(fields: [listingId], references: [id])

  createdAt     DateTime @default(now())
}

model Report {
  id              String   @id @default(cuid())
  reason          String

  reporterId      String
  reportedUserId  String

  reporter        User     @relation("Reporter", fields: [reporterId], references: [id])
  reportedUser    User     @relation("Reported", fields: [reportedUserId], references: [id])

  createdAt       DateTime @default(now())
}

enum ListingType {
  TANGIBLE
  SERVICE
}

enum PricingType {
  FIXED
  BID
  HOURLY
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

enum ListingStatus {
  ACTIVE
  SOLD
  HIDDEN
  REJECTED
}